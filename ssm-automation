schemaVersion: '0.3'
description: Docker Hardening and Validation Script from Nexus
assumeRole: '{{ automationAssumeRole }}'
parameters:
  automationAssumeRole:
    type: String
    description: (Optional) The ARN of the role that allows Automation to perform actions on your behalf.
    default: ''
  instanceIds:
    type: StringList
    description: List of EC2 instance IDs where the script will be executed.
  nexusRepoUrl:
    type: String
    description: The Nexus repository URL for the script.
    default: http://13.201.10.253:8081/repository/docker-hardening-script/
mainSteps:
- name: InstallDependencies
  action: aws:runCommand
  timeoutSeconds: 300
  nextStep: DownloadScript
  isEnd: false
  onFailure: Abort
  inputs:
    DocumentName: AWS-RunShellScript
    InstanceIds: '{{ instanceIds }}'
    Parameters:
      commands:
      - echo "Checking for unzip installation..."
      - |
        if ! command -v unzip &> /dev/null; then
          echo "unzip not found. Installing unzip...";
          sudo yum install -y unzip;
        else
          echo "unzip is already installed.";
        fi
      - sudo yum install -y aws-cli
- name: DownloadScript
  action: aws:runCommand
  timeoutSeconds: 600
  nextStep: UnzipScript
  isEnd: false
  onFailure: Abort
  inputs:
    DocumentName: AWS-RunShellScript
    InstanceIds: '{{ instanceIds }}'
    Parameters:
      commands:
      - cd /tmp
      - echo "Retrieving Nexus credentials from Parameter Store..."
      - |
        NEXUS_USERNAME=$(aws ssm get-parameter --name "/nexus/username" --query "Parameter.Value" --output text)
        NEXUS_PASSWORD=$(aws ssm get-parameter --name "/nexus/password" --query "Parameter.Value" --output text)
      - echo "Downloading script.zip from Nexus..."
      - curl -u "$NEXUS_USERNAME:$NEXUS_PASSWORD" -O "{{ nexusRepoUrl }}script.zip"
- name: UnzipScript
  action: aws:runCommand
  timeoutSeconds: 300
  nextStep: RunMainScript
  isEnd: false
  onFailure: Abort
  inputs:
    DocumentName: AWS-RunShellScript
    InstanceIds: '{{ instanceIds }}'
    Parameters:
      commands:
      - echo "Checking if script.zip exists..."
      - "if [ -f /tmp/script.zip ]; then\n  echo \"Unzipping the downloaded script...\";\n  mkdir -p /tmp/docker-hardening-script;  # Create directory if it doesn't exist\n  unzip -o /tmp/script.zip -d /tmp/docker-hardening-script && echo \"Script unzipped successfully.\" || echo \"Failed to unzip script.zip.\";\nelse\n  echo \"script.zip not found!\"; \n  exit 1;\nfi\n"
- name: RunMainScript
  action: aws:runCommand
  timeoutSeconds: 600
  isEnd: true
  onFailure: Abort
  inputs:
    DocumentName: AWS-RunShellScript
    InstanceIds: '{{ instanceIds }}'
    Parameters:
      commands:
      - echo "Creating reports directory..."
      - mkdir -p /tmp/reports
      - echo "Running main-script.sh..."
      - cd /tmp/docker-hardening-script/script
      - chmod +x main-script.sh
      - sudo ./main-script.sh > /tmp/reports/report.txt
      - echo "Report generated at /tmp/reports/report.txt."

